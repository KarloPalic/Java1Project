/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package hr.algebra.main;

import hr.algebra.JAXB.ActorArchive;
import hr.algebra.JAXB.DirectorArchive;
import hr.algebra.JAXB.MovieArchive;
import hr.algebra.dal.Repository;
import hr.algebra.dal.RepositoryFactory;
import hr.algebra.model.User;
import hr.algebra.view.ManageUsers;
import hr.algebra.view.UploadPanel;
import hr.algebra.loginRegister.Login;
import hr.algebra.model.Actor;
import hr.algebra.model.Director;
import hr.algebra.model.Movie;
import hr.algebra.utilities.JaxbUtils;
import hr.algebra.utilities.MessageUtils;
import hr.algebra.view.CRUDMovies;
import hr.algebra.view.CRUDActors;
import hr.algebra.view.CRUDDirectors;
import hr.algebra.view.CRUDMovieActorRelationship;
import hr.algebra.view.CRUDMovieDirectorRelationtionship;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JMenuItem;
import javax.xml.bind.annotation.XmlRootElement;

/**
 *
 * @author wExzEk
 */
public class MovieManager extends javax.swing.JFrame {

    private static User user;
    private Repository repository;

    private static final String UPLOAD_MOVIES = "Upload Movies";
    private static final String MANAGE_USERS = "Users";

    private static final String CRUD_MOVIES = "Movies";
    private static final String CRUD_ACTOR = "Actors";
    private static final String CRUD_DIRECTOR = "Directors";
    private static final String CRUD_MOVIEACTOR_RELATIONSHIP = "Movie/Actors";
    private static final String CRUD_MOVIEDIRECTOR_RELATIONSHIP = "Movie/Director";

    private static final String MOVIE_DIR = "src/main/resources/jaxb/movies.xml";
    private static final String ACTOR_DIR = "src/main/resources/jaxb/actors.xml";
    private static final String DIRECTOR_DIR = "src/main/resources/jaxb/directors.xml";

    /**
     * Creates new form MovieManager
     */
    public MovieManager() {

        initComponents();
        init();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tpContent = new javax.swing.JTabbedPane();
        jMenuBar1 = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miMovies = new javax.swing.JMenuItem();
        miActors = new javax.swing.JMenuItem();
        miDirectors = new javax.swing.JMenuItem();
        menuView = new javax.swing.JMenu();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("MovieManager");
        setName("MovieManager"); // NOI18N
        setPreferredSize(new java.awt.Dimension(1773, 768));
        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentShown(java.awt.event.ComponentEvent evt) {
                formComponentShown(evt);
            }
        });

        jMenuBar1.setFont(new java.awt.Font("Segoe UI", 1, 18)); // NOI18N

        jMenu1.setText("XML Download");

        miMovies.setText("Movies");
        miMovies.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miMoviesActionPerformed(evt);
            }
        });
        jMenu1.add(miMovies);

        miActors.setText("Actors");
        miActors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miActorsActionPerformed(evt);
            }
        });
        jMenu1.add(miActors);

        miDirectors.setText("Directors");
        miDirectors.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDirectorsActionPerformed(evt);
            }
        });
        jMenu1.add(miDirectors);

        jMenuBar1.add(jMenu1);

        menuView.setText("View");
        jMenuBar1.add(menuView);

        setJMenuBar(jMenuBar1);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 907, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(tpContent, javax.swing.GroupLayout.DEFAULT_SIZE, 539, Short.MAX_VALUE)
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void miDirectorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDirectorsActionPerformed
        try {
            DirectorArchive directorArchive = new DirectorArchive(repository.selectDirectors());
            JaxbUtils.save(directorArchive, DIRECTOR_DIR);
            MessageUtils.showConfirmDialog("Message", "Directors have been saved to xml");
        } catch (Exception ex) {
            Logger.getLogger(MovieManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_miDirectorsActionPerformed

    private void miMoviesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miMoviesActionPerformed
        try {
            MovieArchive movieArchive = new MovieArchive(repository.selectMovies());
            JaxbUtils.save(movieArchive, MOVIE_DIR);
            MessageUtils.showInformationMessage("Message", "Movies have been saved to xml");

        } catch (Exception ex) {
            Logger.getLogger(MovieManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_miMoviesActionPerformed

    private void miActorsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miActorsActionPerformed
        try {
            ActorArchive actorArchive = new ActorArchive(repository.selectActors());
            JaxbUtils.save(actorArchive, ACTOR_DIR);
            MessageUtils.showInformationMessage("Message", "Actors have been saved to xml");
        } catch (Exception ex) {
            Logger.getLogger(MovieManager.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_miActorsActionPerformed

    private void formComponentShown(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentShown
        if (user != null && user.getRole().equals(User.UserRole.Administrator)) {
            addAdminMenuItems();
        } else {
            addUserMenuItems();
        }
    }//GEN-LAST:event_formComponentShown

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MovieManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MovieManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MovieManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MovieManager.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                Login login = new Login();
                login.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu menuView;
    private javax.swing.JMenuItem miActors;
    private javax.swing.JMenuItem miDirectors;
    private javax.swing.JMenuItem miMovies;
    private javax.swing.JTabbedPane tpContent;
    // End of variables declaration//GEN-END:variables

    public void setUser(User loggedInUser) {
        user = loggedInUser;
        initMovieManager();
    }

    private void init() {
        try {
            Login();
            initMovieManager();
            repository = RepositoryFactory.getRepository();

        } catch (Exception e) {
            e.printStackTrace();
        }

    }

    private void Login() {
        Login login = new Login();
        login.setVisible(true);

        ConfigureForm(login);
    }

    public void initMovieManager() {

        if (user != null && user.getRole().equals(User.UserRole.Administrator)) {
            tpContent.removeAll();
            ConfigureAdminPanel();

        } else {
            tpContent.removeAll();
            ConfigureUserPanel();
        }
    }

    private void ConfigureAdminPanel() {
        tpContent.add(UPLOAD_MOVIES, new UploadPanel(user));
        tpContent.add(MANAGE_USERS, new ManageUsers(user));
    }

    private void ConfigureUserPanel() {
        tpContent.add(CRUD_MOVIES, new CRUDMovies(user));
        tpContent.add(CRUD_ACTOR, new CRUDActors(user));
        tpContent.add(CRUD_DIRECTOR, new CRUDDirectors(user));
        tpContent.add(CRUD_MOVIEACTOR_RELATIONSHIP, new CRUDMovieActorRelationship(user));
        tpContent.add(CRUD_MOVIEDIRECTOR_RELATIONSHIP, new CRUDMovieDirectorRelationtionship(user));
    }

    private void ConfigureForm(Login login) {
        if (!login.userExists()) {
            login.dispose();
        } else {
            login.getUser();
            login.dispose();
        }
    }

    private void addAdminMenuItems() {
        JMenuItem manageUsersMenuItem = new JMenuItem("Manage Users");
        manageUsersMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tpContent.setSelectedIndex(tpContent.indexOfTab(MANAGE_USERS));
            }
        });

        JMenuItem uploadMoviesMenuItem = new JMenuItem("Upload Movies");
        uploadMoviesMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tpContent.setSelectedIndex(tpContent.indexOfTab(UPLOAD_MOVIES));
            }
        });

        JMenuItem exitMenuItem = new JMenuItem("Exit");
        exitMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });

        menuView.removeAll();
        menuView.add(manageUsersMenuItem);
        menuView.add(uploadMoviesMenuItem);
        menuView.add(exitMenuItem);
        revalidate();
    }

    private void addUserMenuItems() {
        JMenuItem movieMenuItem = new JMenuItem("Movies");
        movieMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tpContent.setSelectedIndex(tpContent.indexOfTab(CRUD_MOVIES));
            }
        });

        JMenuItem actorMenuItem = new JMenuItem("Actors");
        actorMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tpContent.setSelectedIndex(tpContent.indexOfTab(CRUD_ACTOR));
            }
        });
        
        JMenuItem directorMenuItem = new JMenuItem("Directors");
        directorMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tpContent.setSelectedIndex(tpContent.indexOfTab(CRUD_DIRECTOR));
            }
        });
        
        JMenuItem movieActorMenuItem = new JMenuItem("Movie/Actor");
        movieActorMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tpContent.setSelectedIndex(tpContent.indexOfTab(CRUD_MOVIEACTOR_RELATIONSHIP));
            }
        });
        
        JMenuItem movieDirectorMenuItem = new JMenuItem("Movie/Director");
        movieDirectorMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                tpContent.setSelectedIndex(tpContent.indexOfTab(CRUD_MOVIEDIRECTOR_RELATIONSHIP));
            }
        });

        JMenuItem exitMenuItem = new JMenuItem("Exit");
        exitMenuItem.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                System.exit(0);
            }
        });
        
        menuView.removeAll();
        menuView.add(movieMenuItem);
        menuView.add(actorMenuItem);
        menuView.add(directorMenuItem);
        menuView.add(movieActorMenuItem);
        menuView.add(movieDirectorMenuItem);
        menuView.add(exitMenuItem);
        revalidate();
    }

}
